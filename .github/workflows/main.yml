on: [push]
name: Linux_Container_Workflow
env:
    REGISTRY_NAME: "example-aks-acr"
    CLUSTER_NAME: "example-aks-cluster"
    CLUSTER_RESOURCE_GROUP: "example-aks-rg"
    NAMESPACE: "aksexample"

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
        # checkout the repo
        - name: 'Checkout GitHub Action'
          uses: actions/checkout@master
          
        - name: 'Login via Azure CLI'
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
        
        - name: 'Build and push image'
          uses: azure/docker-login@v1
          with:
            login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}
        - run: |
            docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/sampleapp:${{ github.sha }}
            docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/sampleapp:${{ github.sha }}
            
        # Set the target Azure Kubernetes Service (AKS) cluster. 
        - uses: azure/aks-set-context@v1
          with:
            creds: '${{ secrets.AZURE_CREDENTIALS }}'
            cluster-name: ${{ env.CLUSTER_NAME }}
            resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

        # Create namespace if doesn't exist
        - run: |
            kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -

        # Create imagepullsecret for Azure Container registry (ACR)
        - uses: azure/k8s-create-secret@v1
          with:
            container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
            container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
            container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
            secret-name: ${{ env.REGISTRY_NAME }}-registry-connection
            namespace: ${{ env.NAMESPACE }}

        # Baking the helm chart to generate the manifests to deploy
        - uses: azure/k8s-bake@v1
          with:
            renderEngine: 'helm2'
            helmChart: './my-helm-chart/' 
            helm-version: 'latest' 
          id: bake

        # Deploy app to AKS
        - uses: azure/k8s-deploy@v1
          with:
            manifests: ${{ steps.bake.outputs.manifestsBundle }}
            images: |
              ${{ env.REGISTRY_NAME }}.azurecr.io/myimage:${{ github.sha }}
            imagepullsecrets: |
              ${{ env.REGISTRY_NAME }}-registry-connection
            namespace: ${{ env.NAMESPACE }}
